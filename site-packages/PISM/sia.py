# Copyright (C) 2011, 2012, 2014, 2015, 2016, 2017, 2018, 2020, 2021 David Maxwell and Constantine Khroulev
#
# This file is part of PISM.
#
# PISM is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# PISM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

"""Module containing helper functions for using the SIA stress balance
model."""

import PISM

def computeSIASurfaceVelocities(modeldata, siasolver=PISM.SIAFD):
    """Generates surface horizontal velocities corresponding to solving
    the SIA with zero basal sliding.

    :param `modeldata`: :class:`PISM.model.ModelData` containing
                        variables and model physics

    :param `siasolver`: specific class used for solving the SIA

    """
    md = modeldata
    grid = md.grid
    sia = siasolver(grid)
    sia.init()

    geometry = PISM.Geometry(grid)

    geometry.ice_thickness.copy_from(md.vecs.thk)
    geometry.bed_elevation.copy_from(md.vecs.topg)
    geometry.sea_level_elevation.set(0.0)
    geometry.ice_area_specific_volume.set(0.0)

    geometry.ensure_consistency(md.config.get_number("geometry.ice_free_thickness_standard"))

    inputs = PISM.StressBalanceInputs()

    inputs.geometry = geometry
    inputs.basal_melt_rate = None
    inputs.melange_back_pressure = None
    inputs.basal_yield_stress = None
    inputs.enthalpy = md.vecs.enthalpy
    inputs.age = None

    sliding_velocity = PISM.IceModelVec2V(grid, 'sliding_velocity', PISM.WITHOUT_GHOSTS)
    sliding_velocity.set(0.0)

    sia.update(sliding_velocity, inputs, True)
    u = sia.velocity_u()
    v = sia.velocity_v()

    vel_sia = PISM.model.create2dVelocityVec(grid, name="_sia", stencil_width=1)
    u_sia = PISM.IceModelVec2S(grid, 'u_sia', PISM.WITHOUT_GHOSTS)
    v_sia = PISM.IceModelVec2S(grid, 'v_sia', PISM.WITHOUT_GHOSTS)

    PISM.extract_surface(u, md.vecs.thk, u_sia)
    PISM.extract_surface(v, md.vecs.thk, v_sia)

    with PISM.vec.Access([vel_sia, u_sia, v_sia]):
        for (i, j) in grid.points():
            vel_sia[i, j].u = u_sia[i, j]
            vel_sia[i, j].v = v_sia[i, j]

    return vel_sia
